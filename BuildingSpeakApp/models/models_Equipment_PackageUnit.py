from django.db import models
from django.utils import timezone
from decimal import Decimal
from djorm_pgarray.fields import ArrayField

from models_functions import *
from models_Equipment import Equipment
from models_Message import Message
from models_Reader_ing import Reader


class PackageUnit(Equipment):
    """Type of Equipment model for up
    to 3 compressors, 2 evaporator fans,
    and 2 condenser fans.  Natural gas
    heating.  Can model AHUs, RTUs,
    exhaust fans, condensing units, etc.
    """
    class Meta:
        verbose_name = 'Package Unit'
    #relationships
    
    
    serves = models.CharField(blank=True, max_length=200, help_text='Package Unit: area served')
    
    #nameplate data
    age = models.IntegerField(null=True, blank=True, 
                                  help_text='Package Unit: age, yrs')
    make = models.CharField(blank=True, max_length=200, help_text='Package Unit: manufacturer')
    model = models.CharField(blank=True, max_length=200, help_text='Package Unit: model number')
    serial_number = models.CharField(blank=True, max_length=200, help_text='Package Unit: serial number')
    nameplate_tons = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                   help_text='Package Unit: nameplate cooling capacity, tons')
    nameplate_EER = models.DecimalField(blank=True, null=True, max_digits=5, decimal_places=3,
                                  help_text='Package Unit: nameplate cooling efficiency, (EER)')
    nameplate_MBH_in = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                     help_text='Package Unit: nameplate natural gas heating input, MBH')
    nameplate_MBH_out = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                      help_text='Package Unit: nameplate natural gas heating output, MBH')
    nameplate_ng_eta = models.DecimalField(blank=True, null=True, max_digits=4, decimal_places=3,
                                  help_text='Package Unit: nameplate natural gas heating efficiency, ()')
    nameplate_V = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: nameplate voltage, V')
    nameplate_phase = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                 help_text='Package Unit: nameplate phase, (1,3)')
    nameplate_pf = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                 help_text='Package Unit: nameplate power factor, ()')
    nameplate_RFC = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                 help_text='Package Unit: nameplate refrigerant charge, lbs')
    nameplate_c1_QTY = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: compressor 1 nameplate quantity, ()')
    nameplate_c1_RLA = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: compressor 1 nameplate current (RLA), A')
    nameplate_c1_PH = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: compressor 1 nameplate phase, (1,3)')
    nameplate_c2_QTY = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: compressor 2 nameplate quantity, ()')
    nameplate_c2_RLA = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: compressor 2 nameplate current (RLA), A')
    nameplate_c2_PH = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: compressor 2 nameplate phase, (1,3)')
    nameplate_c3_QTY = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: compressor 3 nameplate quantity, ()')
    nameplate_c3_RLA = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: compressor 3 nameplate current (RLA), A')
    nameplate_c3_PH = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: compressor 3 nameplate phase, (1,3)')
    nameplate_e1_QTY = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: evaporator fan 1 nameplate quantity, ()')
    nameplate_e1_PH = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: evaporator fan 1 nameplate phase, (1,3)')
    nameplate_e1_FLA = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: evaporator fan 1 nameplate current (FLA), A')
    nameplate_e2_QTY = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: evaporator fan 2 nameplate quantity, ()')
    nameplate_e2_PH = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: evaporator fan 2 nameplate phase, (1,3)')
    nameplate_e2_FLA = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: evaporator fan 2 nameplate current (FLA), A')
    nameplate_f1_QTY = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: condenser fan 1 nameplate quantity, ()')
    nameplate_f1_PH = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: condenser fan 1 nameplate phase, (1,3)')
    nameplate_f1_FLA = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: condenser fan 1 nameplate current (FLA), A')
    nameplate_f2_QTY = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: condenser fan 2 nameplate quantity, ()')
    nameplate_f2_PH = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: condenser fan 2 nameplate phase, (1,3)')
    nameplate_f2_FLA = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                                help_text='Package Unit: condenser fan 2 nameplate current (FLA), A')
    #constants
    dP_fan_max = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: max supply fan pressure gain, iwg')
    dP_fan_min = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: min supply fan pressure gain, iwg')
    SAF_max = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: max supply fan flow rate, CFM')
    SAF_min = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: min supply fan flow rate, CFM')
    speed_min = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: min VFD speed ratio {n}, ()',
                            default=Decimal(0.2))
    T_max = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: upper temperature bound, ' + u"\u00b0" + 'F',
                            default=Decimal(150))
    T_min = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: lower temperature bound, ' + u"\u00b0" + 'F',
                            default=Decimal(-50))
    #parameters
    d0 = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: VFD efficiency curve coefficient d0')
    d1 = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: VFD efficiency curve coefficient d1')
    d2 = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: VFD efficiency curve coefficient d2')
    m0 = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: motor efficiency curve coefficient m0')
    m1 = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: motor efficiency curve coefficient m1')
    m2 = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: motor efficiency curve coefficient m2')
    m3 = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: motor efficiency curve coefficient m3')
    f0 = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: fan curve coefficient f0')
    f1 = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: fan curve coefficient f1')
    f2 = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: fan curve coefficient f2')
    e0 = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: fan efficiency curve coefficient e0')
    e1 = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: fan efficiency curve coefficient e1')
    e2 = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: fan efficiency curve coefficient e2')
    #setpoint values
    SCOC = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: occupied cooling setpoint, ' + u"\u00b0" + 'F',
                            default=Decimal(72))
    SCUN = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: unoccupied cooling setpoint, ' + u"\u00b0" + 'F',
                            default=Decimal(80))
    SHOC = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: occupied heating setpoint, ' + u"\u00b0" + 'F',
                            default=Decimal(68))
    SHUN = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: unoccupied heating setpoint, ' + u"\u00b0" + 'F',
                            default=Decimal(60))
    SRFC = models.DecimalField(blank=True, null=True, max_digits=20, decimal_places=3,
                            help_text='Package Unit: fully charged refrigerant pressure, lbs')
    #functions
    def save(self, *args, **kwargs):
        if self.id is None:
            super(PackageUnit, self).save(*args, **kwargs)
            tnow = timezone.now()
            m = Message(when = tnow,
                        message_type = 'Model Info',
                        subject = 'Model created.',
                        comment = 'This Package Unit was created on %s.' % tnow)
            m.save()
            self.messages.add(m)
            
            #----------------------------------------------------------------observed
            #states
            s = Reader(name='SADBo',help_text='Package Unit: supply air dry bulb temperature (' + u"\u00b0" + 'F) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='SARHo',help_text='Package Unit: supply air relative humidity (0-1.0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='SAFLo',help_text='Package Unit: supply air flow rate (CFM) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='SADPo',help_text='Package Unit: supply air pressure (iwg) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='RADBo',help_text='Package Unit: return air dry bulb temperature (' + u"\u00b0" + 'F) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='RARHo',help_text='Package Unit: return air relative humidity (0-1.0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='RAFLo',help_text='Package Unit: return air flow rate (CFM) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='RADPo',help_text='Package Unit: return air pressure (iwg) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='OADBo',help_text='Package Unit: outside air dry bulb temperature (' + u"\u00b0" + 'F) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='OARHo',help_text='Package Unit: outside air relative humidity (0-1.0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='OAFLo',help_text='Package Unit: outside air flow rate (CFM) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='OADPo',help_text='Package Unit: outside air pressure (iwg) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='MADBo',help_text='Package Unit: mixed air dry bulb temperature (' + u"\u00b0" + 'F) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='MARHo',help_text='Package Unit: mixed air relative humidity (0-1.0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='MAFLo',help_text='Package Unit: mixed air flow rate (CFM) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='MADPo',help_text='Package Unit: mixed air pressure (iwg) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='SPDBo',help_text='Package Unit: space dry bulb temperature (' + u"\u00b0" + 'F) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='SPRHo',help_text='Package Unit: space relative humidity (0-1.0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='SPDPo',help_text='Package Unit: space air pressure (iwg) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='FIDPo',help_text='Package Unit: filter pressure drop (iwg) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='CCDPo',help_text='Package Unit: cooling coil pressure drop (iwg) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='SFDPo',help_text='Package Unit: supply fan pressure gain (iwg) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='SFEFo',help_text='Package Unit: supply fan efficiency (0-1.0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='SMEFo',help_text='Package Unit: supply fan motor efficiency (0-1.0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='SVFDo',help_text='Package Unit: supply fan VFD efficiency (0-1.0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='RFCHo',help_text='Package Unit: refrigerant charge (lbs) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='TONSo',help_text='Package Unit: delivered cooling (tons) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='BTUHo',help_text='Package Unit: delivered heating (btu/h) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='CEERo',help_text='Package Unit: cooling efficiency (EER) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='HEFFo',help_text='Package Unit: heating efficiency (0-1.0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='VFDNo',help_text='Package Unit: VFD speed ratio {n} (0-1.0) observed by sensors')
            s.save()
            self.readers.add(s)

            #setpoint arrays
            s = Reader(name='SCOCo',help_text='Package Unit: occupied cooling setpoints (' + u"\u00b0" + 'F) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='SCUNo',help_text='Package Unit: unoccupied cooling setpoints (' + u"\u00b0" + 'F) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='SHOCo',help_text='Package Unit: occupied heating setpoints (' + u"\u00b0" + 'F) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='SHUNo',help_text='Package Unit: unoccupied heating setpoints (' + u"\u00b0" + 'F) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='SRFCo',help_text='Package Unit: fully charged refrigerant pressures (lbs) observed by sensors')
            s.save()
            self.readers.add(s)

            #status
            s = Reader(name='STONo',help_text='Package Unit: unit status (1/0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='STC1o',help_text='Package Unit: compressor 1 status (1/0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='STC2o',help_text='Package Unit: compressor 2 status (1/0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='STC3o',help_text='Package Unit: compressor 3 status (1/0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='STH1o',help_text='Package Unit: heating 1 status (1/0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='STH2o',help_text='Package Unit: heating 2 status (1/0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='STECo',help_text='Package Unit: economizer status (1/0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='STODo',help_text='Package Unit: outdoor air damper status (% open) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='STSFo',help_text='Package Unit: supply fan status (1/0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='STRFo',help_text='Package Unit: return fan status (1/0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='STF1o',help_text='Package Unit: condenser fan 1 status (1/0) observed by sensors')
            s.save()
            self.readers.add(s)
            s = Reader(name='STF2o',help_text='Package Unit: condenser fan 2 status (1/0) observed by sensors')
            s.save()
            self.readers.add(s)
            #----------------------------------------------------------------provided
            #states
            s = Reader(name='SADBp',help_text='Package Unit: supply air dry bulb temperature (' + u"\u00b0" + 'F) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='SARHp',help_text='Package Unit: supply air relative humidity (0-1.0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='SAFLp',help_text='Package Unit: supply air flow rate (CFM) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='SADPp',help_text='Package Unit: supply air pressure (iwg) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='RADBp',help_text='Package Unit: return air dry bulb temperature (' + u"\u00b0" + 'F) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='RARHp',help_text='Package Unit: return air relative humidity (0-1.0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='RAFLp',help_text='Package Unit: return air flow rate (CFM) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='RADPp',help_text='Package Unit: return air pressure (iwg) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='OADBp',help_text='Package Unit: outside air dry bulb temperature (' + u"\u00b0" + 'F) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='OARHp',help_text='Package Unit: outside air relative humidity (0-1.0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='OAFLp',help_text='Package Unit: outside air flow rate (CFM) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='OADPp',help_text='Package Unit: outside air pressure (iwg) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='MADBp',help_text='Package Unit: mixed air dry bulb temperature (' + u"\u00b0" + 'F) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='MARHp',help_text='Package Unit: mixed air relative humidity (0-1.0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='MAFLp',help_text='Package Unit: mixed air flow rate (CFM) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='MADPp',help_text='Package Unit: mixed air pressure (iwg) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='SPDBp',help_text='Package Unit: space dry bulb temperature (' + u"\u00b0" + 'F) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='SPRHp',help_text='Package Unit: space relative humidity (0-1.0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='SPDPp',help_text='Package Unit: space air pressure (iwg) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='FIDPp',help_text='Package Unit: filter pressure drop (iwg) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='CCDPp',help_text='Package Unit: cooling coil pressure drop (iwg) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='SFDPp',help_text='Package Unit: supply fan pressure gain (iwg) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='SFEFp',help_text='Package Unit: supply fan efficiency (0-1.0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='SMEFp',help_text='Package Unit: supply fan motor efficiency (0-1.0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='SVFDp',help_text='Package Unit: supply fan VFD efficiency (0-1.0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='RFCHp',help_text='Package Unit: refrigerant charge (lbs) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='TONSp',help_text='Package Unit: delivered cooling (tons) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='BTUHp',help_text='Package Unit: delivered heating (btu/h) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='CEERp',help_text='Package Unit: cooling efficiency (EER) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='HEFFp',help_text='Package Unit: heating efficiency (0-1.0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='VFDNp',help_text='Package Unit: VFD speed ratio {n} (0-1.0) provided by remote source')
            s.save()
            self.readers.add(s)

            #setpoint arrays
            s = Reader(name='SCOCp',help_text='Package Unit: occupied cooling setpoints (' + u"\u00b0" + 'F) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='SCUNp',help_text='Package Unit: unoccupied cooling setpoints (' + u"\u00b0" + 'F) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='SHOCp',help_text='Package Unit: occupied heating setpoints (' + u"\u00b0" + 'F) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='SHUNp',help_text='Package Unit: unoccupied heating setpoints (' + u"\u00b0" + 'F) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='SRFCp',help_text='Package Unit: fully charged refrigerant pressures (lbs) provided by remote source')
            s.save()
            self.readers.add(s)

            #status
            s = Reader(name='STONp',help_text='Package Unit: unit status (1/0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='STC1p',help_text='Package Unit: compressor 1 status (1/0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='STC2p',help_text='Package Unit: compressor 2 status (1/0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='STC3p',help_text='Package Unit: compressor 3 status (1/0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='STH1p',help_text='Package Unit: heating 1 status (1/0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='STH2p',help_text='Package Unit: heating 2 status (1/0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='STECp',help_text='Package Unit: economizer status (1/0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='STODp',help_text='Package Unit: outdoor air damper status (% open) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='STSFp',help_text='Package Unit: supply fan status (1/0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='STRFp',help_text='Package Unit: return fan status (1/0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='STF1p',help_text='Package Unit: condenser fan 1 status (1/0) provided by remote source')
            s.save()
            self.readers.add(s)
            s = Reader(name='STF2p',help_text='Package Unit: condenser fan 2 status (1/0) provided by remote source')
            s.save()
            self.readers.add(s)
            #----------------------------------------------------------------calculated
            #states
            s = Reader(name='SADBc',help_text='Package Unit: supply air dry bulb temperature (' + u"\u00b0" + 'F) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='SARHc',help_text='Package Unit: supply air relative humidity (0-1.0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='SAFLc',help_text='Package Unit: supply air flow rate (CFM) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='SADPc',help_text='Package Unit: supply air pressure (iwg) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='RADBc',help_text='Package Unit: return air dry bulb temperature (' + u"\u00b0" + 'F) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='RARHc',help_text='Package Unit: return air relative humidity (0-1.0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='RAFLc',help_text='Package Unit: return air flow rate (CFM) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='RADPc',help_text='Package Unit: return air pressure (iwg) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='OADBc',help_text='Package Unit: outside air dry bulb temperature (' + u"\u00b0" + 'F) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='OARHc',help_text='Package Unit: outside air relative humidity (0-1.0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='OAFLc',help_text='Package Unit: outside air flow rate (CFM) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='OADPc',help_text='Package Unit: outside air pressure (iwg) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='MADBc',help_text='Package Unit: mixed air dry bulb temperature (' + u"\u00b0" + 'F) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='MARHc',help_text='Package Unit: mixed air relative humidity (0-1.0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='MAFLc',help_text='Package Unit: mixed air flow rate (CFM) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='MADPc',help_text='Package Unit: mixed air pressure (iwg) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='SPDBc',help_text='Package Unit: space dry bulb temperature (' + u"\u00b0" + 'F) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='SPRHc',help_text='Package Unit: space relative humidity (0-1.0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='SPDPc',help_text='Package Unit: space air pressure (iwg) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='FIDPc',help_text='Package Unit: filter pressure drop (iwg) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='CCDPc',help_text='Package Unit: cooling coil pressure drop (iwg) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='SFDPc',help_text='Package Unit: supply fan pressure gain (iwg) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='SFEFc',help_text='Package Unit: supply fan efficiency (0-1.0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='SMEFc',help_text='Package Unit: supply fan motor efficiency (0-1.0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='SVFDc',help_text='Package Unit: supply fan VFD efficiency (0-1.0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='RFCHc',help_text='Package Unit: refrigerant charge (lbs) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='TONSc',help_text='Package Unit: delivered cooling (tons) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='BTUHc',help_text='Package Unit: delivered heating (btu/h) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='CEERc',help_text='Package Unit: cooling efficiency (EER) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='HEFFc',help_text='Package Unit: heating efficiency (0-1.0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='VFDNc',help_text='Package Unit: VFD speed ratio {n} (0-1.0) calculated by models')
            s.save()
            self.readers.add(s)

            #setpoint arrays
            s = Reader(name='SCOCc',help_text='Package Unit: occupied cooling setpoints (' + u"\u00b0" + 'F) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='SCUNc',help_text='Package Unit: unoccupied cooling setpoints (' + u"\u00b0" + 'F) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='SHOCc',help_text='Package Unit: occupied heating setpoints (' + u"\u00b0" + 'F) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='SHUNc',help_text='Package Unit: unoccupied heating setpoints (' + u"\u00b0" + 'F) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='SRFCc',help_text='Package Unit: fully charged refrigerant pressures (lbs) calculated by models')
            s.save()
            self.readers.add(s)

            #status
            s = Reader(name='STONc',help_text='Package Unit: unit status (1/0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='STC1c',help_text='Package Unit: compressor 1 status (1/0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='STC2c',help_text='Package Unit: compressor 2 status (1/0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='STC3c',help_text='Package Unit: compressor 3 status (1/0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='STH1c',help_text='Package Unit: heating 1 status (1/0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='STH2c',help_text='Package Unit: heating 2 status (1/0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='STECc',help_text='Package Unit: economizer status (1/0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='STODc',help_text='Package Unit: outdoor air damper status (% open) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='STSFc',help_text='Package Unit: supply fan status (1/0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='STRFc',help_text='Package Unit: return fan status (1/0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='STF1c',help_text='Package Unit: condenser fan 1 status (1/0) calculated by models')
            s.save()
            self.readers.add(s)
            s = Reader(name='STF2c',help_text='Package Unit: condenser fan 2 status (1/0) calculated by models')
            s.save()
            self.readers.add(s)
            
        super(PackageUnit, self).save(*args, **kwargs)
    class Meta:
        app_label = 'BuildingSpeakApp'
